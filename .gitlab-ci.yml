stages:
  - test
  - build
  - package

variables:
  BACKEND_CONTAINER_IMAGE: $CI_REGISTRY_IMAGE/backend:latest
  FRONTEND_CONTAINER_IMAGE: $CI_REGISTRY_IMAGE/frontend:latest
test-backend:
  stage: test
  image: maven:latest
  script:
    - cd backend
    - mvn test
  artifacts:
    when: always
    reports:
      junit:
        - backend/target/surefire-reports/TEST-*.xml
        - backend/target/failsafe-reports/TEST-*.xml
test-frontend:
  stage: test
  image: node:latest
  script:
    - cd frontend
    - npm install
    - npm test

build-backend:
  stage: build
  image: maven:latest
  script:
    - cd backend
    - mvn package -DskipTests
  artifacts:
    paths:
      - backend/target/*.jar

build-frontend:
  stage: build
  image: node:latest
  script:
    - cd frontend
    - npm install
    - npm run build
  artifacts:
    paths:
      - frontend/dist



package-backend:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd backend
    - docker build -t $BACKEND_CONTAINER_IMAGE .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $BACKEND_CONTAINER_IMAGE

package-frontend:
  stage: package
  image: docker:latest
  services:
    - docker:dind
  script:
    - cd frontend
    - docker build -t $FRONTEND_CONTAINER_IMAGE .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker push $FRONTEND_CONTAINER_IMAGE
